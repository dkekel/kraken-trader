plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ch.kekelidze'
version = '1.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'ch.kekelidze.krakentrader.KrakenTraderApplication'
}

bootJar {
    layered {
        enabled = true
    }

    mainClass = 'ch.kekelidze.krakentrader.KrakenTraderApplication'
    archiveBaseName = 'kraken-trader'
    archiveFileName = "kraken-trader-${version}.jar"
}

def createBootJarTask(String taskName, String mainClassName, String jarName) {
    return tasks.register(taskName, org.springframework.boot.gradle.tasks.bundling.BootJar) {
        dependsOn(compileJava)

        mainClass.set(mainClassName)
        archiveBaseName.set(jarName)
        archiveFileName.set("${jarName}-${version}.jar")

        classpath = sourceSets.main.runtimeClasspath
        targetJavaVersion = JavaVersion.VERSION_21

        launchScript()
    }
}

def traderJar = createBootJarTask(
        'bootJarTrader',
        'ch.kekelidze.krakentrader.KrakenTraderApplication',
        'kraken-trader'
)

def optimizerJar = createBootJarTask(
        'bootJarOptimizer',
        'ch.kekelidze.krakentrader.StrategyOptimizationRunner',
        'strategy-optimizer'
)

def validatorJar =  createBootJarTask(
        "bootValidateStrategy",
        "ch.kekelidze.krakentrader.ValidateStrategyApplication",
        "strategy-validator"
)

def buyLowSellHighOptimizerJar =  createBootJarTask(
        "bootBuyLowSellHighOptimizer",
        "ch.kekelidze.krakentrader.BuyLowSellHighParameterOptimizationRunner",
        "buy-low-sell-high-param-optimizer"
)

tasks.register('buildAll') {
    description = 'Builds both trader and optimizer applications'
    dependsOn traderJar, optimizerJar, buyLowSellHighOptimizerJar, validatorJar

    doLast {
        println "All application JARs built successfully"
        println "Trader JAR: ${traderJar.get().archiveFile.get().asFile}"
        println "Optimizer JAR: ${optimizerJar.get().archiveFile.get().asFile}"
        println "Validator JAR: ${validatorJar.get().archiveFile.get().asFile}"
        println "Buy Low Sell High Optimizer JAR: ${buyLowSellHighOptimizerJar.get().archiveFile.get().asFile}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0-M6")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.3'
    implementation 'org.json:json:20250107'
    implementation 'org.ta4j:ta4j-core:0.15'
    implementation 'io.jenetics:jenetics:7.1.0'

    implementation 'org.apache.httpcomponents.client5:httpclient5'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
}

tasks.named('test') {
    useJUnitPlatform()
}
