plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ch.kekelidze'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'ch.kekelidze.krakentrader.KrakenTraderApplication'
}

bootJar {
    mainClass = 'ch.kekelidze.krakentrader.KrakenTraderApplication'
}

tasks.register('bootJarTrader', org.springframework.boot.gradle.tasks.bundling.BootJar) {
    description = 'Builds a boot JAR for the trader application'
    group = 'build'

    mainClass.set('ch.kekelidze.krakentrader.KrakenTraderApplication')
    archiveBaseName.set('kraken-trader')
    archiveFileName.set("kraken-trader-${version}.jar")

    classpath = sourceSets.main.runtimeClasspath
    targetJavaVersion = JavaVersion.VERSION_21

    from(sourceSets.main.output)
}

// Register task for creating the optimizer application jar
tasks.register('bootJarOptimizer', org.springframework.boot.gradle.tasks.bundling.BootJar) {
    description = 'Builds a boot JAR for the strategy optimization application'
    group = 'build'

    mainClass.set('ch.kekelidze.krakentrader.StrategyOptimizationRunner')
    archiveBaseName.set('strategy-optimizer')
    archiveFileName.set("strategy-optimizer-${version}.jar")

    classpath = sourceSets.main.runtimeClasspath
    targetJavaVersion = JavaVersion.VERSION_21

    from(sourceSets.main.output)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0-M6")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
//    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.ai:spring-ai-vertex-ai-gemini-spring-boot-starter'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.3'
    implementation 'org.json:json:20250107'
    implementation 'org.ta4j:ta4j-core:0.15'
    implementation 'io.jenetics:jenetics:7.1.0'

    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M2.1'
    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M2.1'

    implementation 'org.apache.httpcomponents.client5:httpclient5'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
//    imports {
//        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
//    }
}

tasks.named('test') {
    useJUnitPlatform()
}
